"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncSnapshot = void 0;
const AsyncStack_1 = require("../polyfill/AsyncStack");
const AsyncVariable_1 = require("./AsyncVariable");
const runInFork_1 = require("./utils/runInFork");
class AsyncSnapshot {
    capture() {
        let current = AsyncStack_1.AsyncStack.getCurrent();
        while (current) {
            const variables = AsyncVariable_1.AsyncVariable.variableByStack.get(current);
            variables === null || variables === void 0 ? void 0 : variables.forEach((variable) => {
                const alreadyHasVariable = this.dataByVariable.has(variable);
                if (!alreadyHasVariable) {
                    const value = variable.get();
                    this.dataByVariable.set(variable, value);
                }
            });
            current = current.origin;
        }
    }
    constructor() {
        this.dataByVariable = new Map();
        this.capture();
    }
    static create() {
        const snapshot = new AsyncSnapshot();
        return snapshot;
    }
    run(callback) {
        return (0, runInFork_1.runInFork)(() => {
            const current = AsyncStack_1.AsyncStack.getCurrent();
            AsyncVariable_1.AsyncVariable.stopWalkAt.add(current);
            this.dataByVariable.forEach((data, variable) => {
                variable.set(current, data);
            });
            return callback();
        });
    }
    wrap(callback) {
        return (...args) => this.run(() => callback(...args));
    }
    static wrap(callback) {
        return (0, runInFork_1.runInFork)(() => {
            const snapshot = AsyncSnapshot.create();
            return snapshot.wrap(callback);
        });
    }
}
exports.AsyncSnapshot = AsyncSnapshot;
//# sourceMappingURL=AsyncSnapshot.js.map