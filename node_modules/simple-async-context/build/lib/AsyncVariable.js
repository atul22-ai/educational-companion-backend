"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncVariable = void 0;
const AsyncStack_1 = require("../polyfill/AsyncStack");
const runInFork_1 = require("./utils/runInFork");
class AsyncVariable {
    constructor() {
        this.data = new WeakMap();
    }
    static registerVariable(variable, stack) {
        if (!AsyncVariable.variableByStack.has(stack)) {
            AsyncVariable.variableByStack.set(stack, new Set());
        }
        AsyncVariable.variableByStack.get(stack).add(variable);
    }
    getBox(stack) {
        if (!stack)
            return undefined;
        const currentBox = this.data.get(stack);
        if (currentBox)
            return currentBox;
        const canWalkOrigin = AsyncVariable.stopWalkAt.has(stack);
        if (canWalkOrigin)
            return undefined;
        const parentBox = this.getBox(stack.origin);
        if (parentBox)
            this.setBox(stack, parentBox);
        return parentBox;
    }
    setBox(stack, box) {
        AsyncVariable.registerVariable(this, stack);
        this.data.set(stack, box);
    }
    set(stack, data) {
        this.setBox(stack, {
            value: data,
        });
    }
    get() {
        var _a;
        const current = AsyncStack_1.AsyncStack.getCurrent();
        return (_a = this.getBox(current)) === null || _a === void 0 ? void 0 : _a.value;
    }
    run(data, callback) {
        return (0, runInFork_1.runInFork)(() => {
            const current = AsyncStack_1.AsyncStack.getCurrent();
            this.set(current, data);
            return callback();
        });
    }
    wrap(data, callback) {
        // @ts-ignore
        return (...args) => this.run(data, () => callback(...args));
    }
}
exports.AsyncVariable = AsyncVariable;
AsyncVariable.stopWalkAt = new WeakSet();
AsyncVariable.variableByStack = new WeakMap();
//# sourceMappingURL=AsyncVariable.js.map