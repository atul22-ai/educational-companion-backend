import * as _hey_api_client_fetch from '@hey-api/client-fetch';
import * as _llama_flow_core_middleware_trace_events from '@llama-flow/core/middleware/trace-events';
import * as _llama_flow_core from '@llama-flow/core';
import { InferWorkflowEventData } from '@llama-flow/core';

/**
 * Enum for representing the languages supported by the parser
 */
type ParserLanguages = "af" | "az" | "bs" | "cs" | "cy" | "da" | "de" | "en" | "es" | "et" | "fr" | "ga" | "hr" | "hu" | "id" | "is" | "it" | "ku" | "la" | "lt" | "lv" | "mi" | "ms" | "mt" | "nl" | "no" | "oc" | "pi" | "pl" | "pt" | "ro" | "rs_latin" | "sk" | "sl" | "sq" | "sv" | "sw" | "tl" | "tr" | "uz" | "vi" | "ar" | "fa" | "ug" | "ur" | "bn" | "as" | "mni" | "ru" | "rs_cyrillic" | "be" | "bg" | "uk" | "mn" | "abq" | "ady" | "kbd" | "ava" | "dar" | "inh" | "che" | "lbe" | "lez" | "tab" | "tjk" | "hi" | "mr" | "ne" | "bh" | "mai" | "ang" | "bho" | "mah" | "sck" | "new" | "gom" | "sa" | "bgc" | "th" | "ch_sim" | "ch_tra" | "ja" | "ko" | "ta" | "te" | "kn";
/**
 * Enum for representing the languages supported by the parser
 */
declare const ParserLanguages: {
    readonly AF: "af";
    readonly AZ: "az";
    readonly BS: "bs";
    readonly CS: "cs";
    readonly CY: "cy";
    readonly DA: "da";
    readonly DE: "de";
    readonly EN: "en";
    readonly ES: "es";
    readonly ET: "et";
    readonly FR: "fr";
    readonly GA: "ga";
    readonly HR: "hr";
    readonly HU: "hu";
    readonly ID: "id";
    readonly IS: "is";
    readonly IT: "it";
    readonly KU: "ku";
    readonly LA: "la";
    readonly LT: "lt";
    readonly LV: "lv";
    readonly MI: "mi";
    readonly MS: "ms";
    readonly MT: "mt";
    readonly NL: "nl";
    readonly NO: "no";
    readonly OC: "oc";
    readonly PI: "pi";
    readonly PL: "pl";
    readonly PT: "pt";
    readonly RO: "ro";
    readonly RS_LATIN: "rs_latin";
    readonly SK: "sk";
    readonly SL: "sl";
    readonly SQ: "sq";
    readonly SV: "sv";
    readonly SW: "sw";
    readonly TL: "tl";
    readonly TR: "tr";
    readonly UZ: "uz";
    readonly VI: "vi";
    readonly AR: "ar";
    readonly FA: "fa";
    readonly UG: "ug";
    readonly UR: "ur";
    readonly BN: "bn";
    readonly AS: "as";
    readonly MNI: "mni";
    readonly RU: "ru";
    readonly RS_CYRILLIC: "rs_cyrillic";
    readonly BE: "be";
    readonly BG: "bg";
    readonly UK: "uk";
    readonly MN: "mn";
    readonly ABQ: "abq";
    readonly ADY: "ady";
    readonly KBD: "kbd";
    readonly AVA: "ava";
    readonly DAR: "dar";
    readonly INH: "inh";
    readonly CHE: "che";
    readonly LBE: "lbe";
    readonly LEZ: "lez";
    readonly TAB: "tab";
    readonly TJK: "tjk";
    readonly HI: "hi";
    readonly MR: "mr";
    readonly NE: "ne";
    readonly BH: "bh";
    readonly MAI: "mai";
    readonly ANG: "ang";
    readonly BHO: "bho";
    readonly MAH: "mah";
    readonly SCK: "sck";
    readonly NEW: "new";
    readonly GOM: "gom";
    readonly SA: "sa";
    readonly BGC: "bgc";
    readonly TH: "th";
    readonly CH_SIM: "ch_sim";
    readonly CH_TRA: "ch_tra";
    readonly JA: "ja";
    readonly KO: "ko";
    readonly TA: "ta";
    readonly TE: "te";
    readonly KN: "kn";
};
/**
 * Enum for representing the status of a job
 */
type StatusEnum = "PENDING" | "SUCCESS" | "ERROR" | "PARTIAL_SUCCESS" | "CANCELLED";
/**
 * Enum for representing the status of a job
 */
declare const StatusEnum: {
    readonly PENDING: "PENDING";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
    readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
    readonly CANCELLED: "CANCELLED";
};

declare const uploadEvent: _llama_flow_core.WorkflowEvent<{
    adaptive_long_table?: boolean | undefined;
    annotate_links?: boolean | undefined;
    auto_mode?: boolean | undefined;
    auto_mode_trigger_on_image_in_page?: boolean | undefined;
    auto_mode_trigger_on_table_in_page?: boolean | undefined;
    auto_mode_trigger_on_text_in_page?: string | undefined;
    auto_mode_trigger_on_regexp_in_page?: string | undefined;
    auto_mode_configuration_json?: string | undefined;
    azure_openai_api_version?: string | undefined;
    azure_openai_deployment_name?: string | undefined;
    azure_openai_endpoint?: string | undefined;
    azure_openai_key?: string | undefined;
    bbox_bottom?: number | undefined;
    bbox_left?: number | undefined;
    bbox_right?: number | undefined;
    bbox_top?: number | undefined;
    disable_ocr?: boolean | undefined;
    disable_reconstruction?: boolean | undefined;
    disable_image_extraction?: boolean | undefined;
    do_not_cache?: boolean | undefined;
    do_not_unroll_columns?: boolean | undefined;
    extract_charts?: boolean | undefined;
    guess_xlsx_sheet_name?: boolean | undefined;
    html_make_all_elements_visible?: boolean | undefined;
    html_remove_fixed_elements?: boolean | undefined;
    html_remove_navigation_elements?: boolean | undefined;
    http_proxy?: string | undefined;
    input_s3_path?: string | undefined;
    input_s3_region?: string | undefined;
    input_url?: string | undefined;
    invalidate_cache?: boolean | undefined;
    language?: ParserLanguages[] | undefined;
    extract_layout?: boolean | undefined;
    max_pages?: number | null | undefined;
    output_pdf_of_document?: boolean | undefined;
    output_s3_path_prefix?: string | undefined;
    output_s3_region?: string | undefined;
    page_prefix?: string | undefined;
    page_separator?: string | undefined;
    page_suffix?: string | undefined;
    preserve_layout_alignment_across_pages?: boolean | undefined;
    skip_diagonal_text?: boolean | undefined;
    spreadsheet_extract_sub_tables?: boolean | undefined;
    structured_output?: boolean | undefined;
    structured_output_json_schema?: string | undefined;
    structured_output_json_schema_name?: string | undefined;
    take_screenshot?: boolean | undefined;
    target_pages?: string | undefined;
    vendor_multimodal_api_key?: string | undefined;
    vendor_multimodal_model_name?: string | undefined;
    model?: string | undefined;
    webhook_url?: string | undefined;
    parse_mode?: "parse_page_without_llm" | "parse_page_with_llm" | "parse_page_with_lvm" | "parse_page_with_agent" | "parse_page_with_layout_agent" | "parse_document_with_llm" | "parse_document_with_lvm" | "parse_document_with_agent" | null | undefined;
    system_prompt?: string | undefined;
    system_prompt_append?: string | undefined;
    user_prompt?: string | undefined;
    job_timeout_in_seconds?: number | undefined;
    job_timeout_extra_time_per_page_in_seconds?: number | undefined;
    strict_mode_image_extraction?: boolean | undefined;
    strict_mode_image_ocr?: boolean | undefined;
    strict_mode_reconstruction?: boolean | undefined;
    strict_mode_buggy_font?: boolean | undefined;
    save_images?: boolean | undefined;
    ignore_document_elements_for_layout_detection?: boolean | undefined;
    output_tables_as_HTML?: boolean | undefined;
    use_vendor_multimodal_model?: boolean | undefined;
    bounding_box?: string | undefined;
    gpt4o_mode?: boolean | undefined;
    gpt4o_api_key?: string | undefined;
    complemental_formatting_instruction?: string | undefined;
    content_guideline_instruction?: string | undefined;
    premium_mode?: boolean | undefined;
    is_formatting_instruction?: boolean | undefined;
    continuous_mode?: boolean | undefined;
    parsing_instruction?: string | undefined;
    fast_mode?: boolean | undefined;
    formatting_instruction?: string | undefined;
    preset?: "fast" | "balanced" | "premium" | "structured" | "auto" | "scientific" | "invoice" | "slides" | "_carlyle" | undefined;
    compact_markdown_table?: boolean | undefined;
    markdown_table_multiline_header_separator?: string | undefined;
    page_error_tolerance?: number | undefined;
    replace_failed_page_mode?: "raw_text" | "blank_page" | "error_message" | null | undefined;
    replace_failed_page_with_error_message_prefix?: string | undefined;
    replace_failed_page_with_error_message_suffix?: string | undefined;
    file?: string | Blob | File | Uint8Array<ArrayBuffer> | undefined;
}, "upload">;

type LlamaParseWorkflowParams = {
    region?: "us" | "eu" | "us-staging";
    apiKey?: string;
};
declare const llamaParseWorkflow: Omit<Omit<_llama_flow_core.Workflow, "handle"> & {
    handle<const AcceptEvents extends _llama_flow_core.WorkflowEvent<any>[], Result extends ReturnType<_llama_flow_core.WorkflowEvent<any>["with"]> | void, Fn extends _llama_flow_core.Handler<AcceptEvents, Result>>(accept: AcceptEvents, handler: Fn): _llama_flow_core_middleware_trace_events.HandlerRef<AcceptEvents, Result, Fn>;
    substream<T extends _llama_flow_core.WorkflowEventData<any>>(eventData: _llama_flow_core.WorkflowEventData<any>, stream: _llama_flow_core.WorkflowStream<T>): _llama_flow_core.WorkflowStream<T>;
}, "createContext"> & {
    createContext(input: LlamaParseWorkflowParams): _llama_flow_core.WorkflowContext & {
        readonly state: {
            cache: Record<string, StatusEnum>;
            client: _hey_api_client_fetch.Client;
        };
    };
};
type ParseJob = {
    get jobId(): string;
    get signal(): AbortSignal;
    get context(): ReturnType<typeof llamaParseWorkflow.createContext>;
    get form(): InferWorkflowEventData<typeof uploadEvent>;
    markdown(): Promise<string>;
    text(): Promise<string>;
    json(): Promise<any[]>;
};
declare const upload: (params: InferWorkflowEventData<typeof uploadEvent> & LlamaParseWorkflowParams) => Promise<ParseJob>;

export { upload };
export type { LlamaParseWorkflowParams, ParseJob };
